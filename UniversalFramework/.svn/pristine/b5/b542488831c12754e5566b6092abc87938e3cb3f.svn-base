/**
 * 
 */
package com.cccollector.universal.view;

import java.beans.PropertyDescriptor;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import org.primefaces.context.RequestContext;
import org.primefaces.event.SelectEvent;
import org.primefaces.model.SortMeta;
import org.primefaces.model.SortOrder;

/**
 * 泛型列表Bean类
 *
 * @author 谢朋
 * Copyright © 2015-2018年 北京华星成汇文化发展有限公司. All rights reserved.
 */
public abstract class GenericListBean<T> {
	
	/**
	 * 模型显示名称
	 */
	protected String modelDisplayName;
	
	/**
	 * 模型属性名称
	 */
	protected String modelAttributeName;
	
	/**
	 * 模型ID属性名称
	 */
	protected String modelIdAttributeName;
	
	/**
	 * 泛型列表Bean处理器
	 */
	protected GenericListBeanHandler<T> genericListBeanHandler;

	/**
	 * 模型ID1
	 */
	private String modelId1;

	public String getModelId1() {
		return modelId1;
	}

	public void setModelId1(String _modelId1) {
		modelId1 = _modelId1;
		
		// 加载
		if (relatedModel(1) == null) {
			Integer id = 0;
			try {
				id = Integer.valueOf(modelId1);
			} catch (Exception e) {}
			if (id != 0) {
				Object relatedModel = genericListBeanHandler.loadRelatedModel(1, id);
				relatedModelMap.put(1, relatedModel);
			}
		}
	}

	/**
	 * 模型ID2
	 */
	private String modelId2;

	public String getModelId2() {
		return modelId2;
	}

	public void setModelId2(String _modelId2) {
		modelId2 = _modelId2;
		
		// 加载
		if (relatedModel(2) == null) {
			Integer id = 0;
			try {
				id = Integer.valueOf(modelId2);
			} catch (Exception e) {}
			if (id != 0) {
				Object relatedModel = genericListBeanHandler.loadRelatedModel(2, id);
				relatedModelMap.put(2, relatedModel);
			}
		}
	}

	/**
	 * 模型ID3
	 */
	private String modelId3;

	public String getModelId3() {
		return modelId3;
	}

	public void setModelId3(String _modelId3) {
		modelId3 = _modelId3;
		
		// 加载
		if (relatedModel(3) == null) {
			Integer id = 0;
			try {
				id = Integer.valueOf(modelId3);
			} catch (Exception e) {}
			if (id != 0) {
				Object relatedModel = genericListBeanHandler.loadRelatedModel(3, id);
				relatedModelMap.put(3, relatedModel);
			}
		}
	}

	/**
	 * 关联模型映射
	 */
	private Map<Integer, Object> relatedModelMap = new HashMap<>();

	/**
	 * 通过序号获取关联模型
	 * 
	 * @param index 序号
	 * @return 关联模型
	 */
	public Object relatedModel(int index) {
		return relatedModelMap.get(index);
	}

	/**
	 * 全部模型
	 */
	protected List<T> allModels;

	public List<T> getAllModels() {
		if (allModels == null) {
			allModels = genericListBeanHandler.loadAllModelList();
		}
		return allModels;
	}
	
	/**
	 * 分页模型
	 */
	protected GenericLazyDataModel<T> pageModel;
	
	public GenericLazyDataModel<T> getPageModel() {
		if (pageModel == null) {
			pageModel = new GenericLazyDataModel<T>(modelIdAttributeName, genericListBeanHandler);
		}
		return pageModel;
	}

	/**
	 * 是否多选
	 */
	protected boolean multiSelect;

	public boolean getMultiSelect() {
		return multiSelect;
	}

	public void setMultiSelect(boolean _multiSelect) {
		multiSelect = _multiSelect;
	}

	/**
	 * 选中的模型
	 */
	protected List<T> selectedModels;

	public List<T> getSelectedModels() {
		return selectedModels;
	}

	public void setSelectedModels(List<T> _selectedModels) {
		selectedModels = _selectedModels;
	}
	
	/**
	 * 添加模型
	 */
	public void addModelAction() {
		// 对话框选项
		Map<String, Object> options = new HashMap<String, Object>();
		options.put("width", 360);
		options.put("resizable", false);
		options.put("modal", true);
		options.put("includeViewParams", true);
		
		// 传递的参数
		Map<String, List<String>> params = new HashMap<String, List<String>>();
		List<String> param = new ArrayList<String>();
		param.add("");
		params.put(modelIdAttributeName, param);
		
		// 显示编辑应用对话框
		RequestContext.getCurrentInstance().openDialog(modelAttributeName + "Edit", options, params);
	}
	
	/**
	 * 处理添加模型返回
	 */
	public void handleAddModelReturn(SelectEvent event) {
		Boolean success = (Boolean) event.getObject();
		FacesContext facesContext = FacesContext.getCurrentInstance();
		if (success == true) {
			// 清空选中的模型
			selectedModels = null;
			facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "提示信息", "添加" + modelDisplayName + "成功！"));
		} else {
			facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "错误提示", "添加" + modelDisplayName + "失败，请重新尝试！"));
		}
		
		// 刷新全部模型
		allModels = null;
		// 刷新分页模型
		pageModel = null;
	}
	
	/**
	 * 编辑模型
	 */
	public void editModelAction(T t) {
		// 对话框选项
		Map<String, Object> options = new HashMap<String, Object>();
		options.put("width", 360);
		options.put("resizable", false);
		options.put("modal", true);
		options.put("includeViewParams", true);
		
		// 传递的参数
		Map<String, List<String>> params = new HashMap<String, List<String>>();
		List<String> param = new ArrayList<String>();
		try {
			PropertyDescriptor propertyDescriptor = new PropertyDescriptor(modelIdAttributeName, t.getClass());
			Object value = propertyDescriptor.getReadMethod().invoke(t);
			param.add(value.toString());
		} catch (Exception e) {
			e.printStackTrace();
		}
		params.put(modelIdAttributeName, param);
		
		// 显示编辑应用对话框
		RequestContext.getCurrentInstance().openDialog(modelAttributeName + "Edit", options, params);
	}
	
	/**
	 * 编辑模型
	 */
	public void editModelAction() {
		FacesContext facesContext = FacesContext.getCurrentInstance();
		if (selectedModels != null && selectedModels.size() > 0) {
			if (selectedModels.size() == 1) {
				// 对话框选项
				Map<String, Object> options = new HashMap<String, Object>();
				options.put("width", 360);
				options.put("resizable", false);
				options.put("modal", true);
				options.put("includeViewParams", true);
				
				// 传递的参数
				Map<String, List<String>> params = new HashMap<String, List<String>>();
				List<String> param = new ArrayList<String>();
				try {
					T t = selectedModels.get(0);
					PropertyDescriptor propertyDescriptor = new PropertyDescriptor(modelIdAttributeName, t.getClass());
					Object value = propertyDescriptor.getReadMethod().invoke(t);
					param.add(value.toString());
				} catch (Exception e) {
					e.printStackTrace();
				}
				params.put(modelIdAttributeName, param);
				
				// 显示编辑应用对话框
				RequestContext.getCurrentInstance().openDialog(modelAttributeName + "Edit", options, params);
			} else {
				facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "错误提示", "只能选择一个" + modelDisplayName + "进行编辑！"));
			}
		} else {
			facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "错误提示", "请选择一个" + modelDisplayName + "进行编辑！"));
		}
	}
	
	/**
	 * 处理编辑模型返回
	 */
	public void handleEditModelReturn(SelectEvent event) {
		Boolean success = (Boolean) event.getObject();
		FacesContext facesContext = FacesContext.getCurrentInstance();
		if (success == true) {
			facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "提示信息", "编辑" + modelDisplayName + "成功！"));
		} else {
			facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "错误提示", "编辑" + modelDisplayName + "失败，请重新尝试！"));
		}
		
		// 刷新全部模型
		allModels = null;
		// 刷新分页模型
		pageModel = null;
	}

	/**
	 * 泛型列表Bean处理器全部
	 */
	public static abstract class GenericListBeanHandlerAll<T> implements GenericListBeanHandler<T> {

		@Override
		public Object loadRelatedModel(int index, int relatedModelId) {
			return null;
		}

		@Override
		public List<T> loadPageModelList(int first, int pageSize, String sortField, SortOrder sortOrder, Map<String, Object> filters, StringBuffer totalRowCount) {
			return null;
		}

		@Override
		public List<T> loadMultiSortPageModelList(int first, int pageSize, List<SortMeta> multiSortMeta, Map<String, Object> filters, StringBuffer totalRowCount) {
			return null;
		}
    }

	/**
	 * 泛型列表Bean处理器相关和全部
	 */
	public static abstract class GenericListBeanHandlerRelatedAll<T> implements GenericListBeanHandler<T> {

		@Override
		public List<T> loadPageModelList(int first, int pageSize, String sortField, SortOrder sortOrder, Map<String, Object> filters, StringBuffer totalRowCount) {
			return null;
		}

		@Override
		public List<T> loadMultiSortPageModelList(int first, int pageSize, List<SortMeta> multiSortMeta, Map<String, Object> filters, StringBuffer totalRowCount) {
			return null;
		}
   }

	/**
	 * 泛型列表Bean处理器分页
	 */
	public static abstract class GenericListBeanHandlerPage<T> implements GenericListBeanHandler<T> {

		@Override
		public Object loadRelatedModel(int index, int relatedModelId) {
			return null;
		}

		@Override
		public List<T> loadAllModelList() {
			return null;
		}

		@Override
		public List<T> loadMultiSortPageModelList(int first, int pageSize, List<SortMeta> multiSortMeta, Map<String, Object> filters, StringBuffer totalRowCount) {
			return null;
		}
    }

	/**
	 * 泛型列表Bean处理器相关和分页
	 */
	public static abstract class GenericListBeanHandlerRelatedPage<T> implements GenericListBeanHandler<T> {

		@Override
		public List<T> loadAllModelList() {
			return null;
		}

		@Override
		public List<T> loadMultiSortPageModelList(int first, int pageSize, List<SortMeta> multiSortMeta, Map<String, Object> filters, StringBuffer totalRowCount) {
			return null;
		}
    }
}
