/**
 * 
 */
package com.cccollector.universal.view;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.ResourceBundle;

import javax.faces.context.FacesContext;

import org.primefaces.event.FileUploadEvent;
import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;

/**
 * 泛型编辑Bean类
 *
 * @author 谢朋
 * Copyright © 2015-2018年 北京华星成汇文化发展有限公司. All rights reserved.
 */
public abstract class GenericEditBean<T> {
	
	/**
	 * 泛型编辑Bean处理器
	 */
	protected GenericEditBeanHandler<T> genericEditBeanHandler;

	/**
	 * 模型ID
	 */
	private String modelId;

	public String getModelId() {
		return modelId;
	}

	public void setModelId(String _modelId) {
		modelId = _modelId;
		
		// 新建或加载
		if (model == null) {
			Integer id = null;
			try {
				id = Integer.valueOf(modelId);
			} catch (Exception e) {}
			model = genericEditBeanHandler.loadModel(id);
		}
	}

	/**
	 * 模型
	 */
	private T model;

	public T getModel() {
		return model;
	}

	/**
	 * 模型ID1
	 */
	private String modelId1;

	public String getModelId1() {
		return modelId1;
	}

	public void setModelId1(String _modelId1) {
		modelId1 = _modelId1;
		
		// 加载
		if (relatedModel(1) == null) {
			Integer id = 0;
			try {
				id = Integer.valueOf(modelId1);
			} catch (Exception e) {}
			if (id != 0) {
				Object relatedModel = genericEditBeanHandler.loadRelatedModel(1, id);
				if (relatedModel != null) {
					relatedModelMap.put(1, relatedModel);
				}
			}
		}
	}

	/**
	 * 模型ID2
	 */
	private String modelId2;

	public String getModelId2() {
		return modelId2;
	}

	public void setModelId2(String _modelId2) {
		modelId2 = _modelId2;
		
		// 加载
		if (relatedModel(2) == null) {
			Integer id = 0;
			try {
				id = Integer.valueOf(modelId2);
			} catch (Exception e) {}
			if (id != 0) {
				Object relatedModel = genericEditBeanHandler.loadRelatedModel(2, id);
				if (relatedModel != null) {
					relatedModelMap.put(2, relatedModel);
				}
			}
		}
	}

	/**
	 * 模型ID3
	 */
	private String modelId3;

	public String getModelId3() {
		return modelId3;
	}

	public void setModelId3(String _modelId3) {
		modelId3 = _modelId3;
		
		// 加载
		if (relatedModel(3) == null) {
			Integer id = 0;
			try {
				id = Integer.valueOf(modelId3);
			} catch (Exception e) {}
			if (id != 0) {
				Object relatedModel = genericEditBeanHandler.loadRelatedModel(3, id);
				if (relatedModel != null) {
					relatedModelMap.put(3, relatedModel);
				}
			}
		}
	}

	/**
	 * 关联模型映射
	 */
	private Map<Integer, Object> relatedModelMap = new HashMap<>();

	/**
	 * 通过序号获取关联模型
	 * 
	 * @param index 序号
	 * @return 关联模型
	 */
	public Object relatedModel(int index) {
		return relatedModelMap.get(index);
	}

	/**
	 * 图片文件路径映射
	 */
	private Map<Integer, String> pictureFilePathMap = new HashMap<>();

	/**
	 * 通过序号获取图片文件路径
	 * 
	 * @param index 序号
	 * @return 图片文件路径
	 */
	public String pictureFilePath(int index) {
		return pictureFilePathMap.get(index);
	}

	/**
	 * 图片图像映射
	 */
	private Map<Integer, StreamedContent> pictureImageMap = new HashMap<>();

	/**
	 * 通过序号获取图片图像
	 * 
	 * @param index 序号
	 * @return 图片图像
	 */
	public StreamedContent pictureImage(int index) {
		return pictureImageMap.get(index);
	}

	/**
	 * 图片信息映射
	 */
	private Map<Integer, SimpleImageInfo> pictureInfoMap = new HashMap<>();

	/**
	 * 通过序号获取图片信息
	 * 
	 * @param index 序号
	 * @return 图片信息
	 */
	public SimpleImageInfo pictureInfo(int index) {
		return pictureInfoMap.get(index);
	}

	/**
	 * 加载图片文件
	 * 
	 * @param index 序号
	 * @param pictureFilePath 图片文件路径
	 */
	public void loadPictureFile(int index, String pictureFilePath) {
		try {
			pictureFilePathMap.put(index, pictureFilePath);
			FileInputStream fileInputStream = new FileInputStream(pictureFilePath);
			pictureImageMap.put(index, new DefaultStreamedContent(fileInputStream));
			pictureInfoMap.put(index, new SimpleImageInfo(new File(pictureFilePath)));
		} catch (Exception e) {
			pictureFilePathMap.remove(index);
			pictureImageMap.remove(index);
			pictureInfoMap.remove(index);
		}
	}

	/**
	 * 处理图片文件上传
	 */
	public void handlePictureFileUpload(FileUploadEvent fileUploadEvent) {
		String clientId = fileUploadEvent.getComponent().getClientId();
		int index = Integer.parseInt(clientId.substring(clientId.indexOf("_") + 1));
		try {
			ResourceBundle resourceBundle = FacesContext.getCurrentInstance().getApplication().getResourceBundle(FacesContext.getCurrentInstance(), "configBundle");
			String webAppRootKey = resourceBundle.getString("paths.webAppRootKey");
			String webTemp = resourceBundle.getString("paths.webTemp");
			String tempPath = System.getProperty(webAppRootKey) + webTemp + File.separator;
			new File(tempPath).mkdirs();
			String tempFileName = new Date().getTime() + "_" + new Random().nextInt(10000);
			pictureFilePathMap.put(index, tempPath + tempFileName);
			fileUploadEvent.getFile().write(pictureFilePathMap.get(index));
			FileInputStream fileInputStream = new FileInputStream(pictureFilePathMap.get(index));
			pictureImageMap.put(index, new DefaultStreamedContent(fileInputStream));
			pictureInfoMap.put(index, new SimpleImageInfo(new File(pictureFilePathMap.get(index))));
		} catch (Exception e) {
			pictureFilePathMap.remove(index);
			pictureImageMap.remove(index);
			pictureInfoMap.remove(index);
		}
	}

	/**
	 * 泛型编辑Bean处理器模型
	 */
	public static abstract class GenericEditBeanHandlerModel<T> implements GenericEditBeanHandler<T> {

		@Override
		public Object loadRelatedModel(int index, int relatedModelId) {
			return null;
		}
	}

	/**
	 * 泛型编辑Bean处理器模型和相关
	 */
	public static abstract class GenericEditBeanHandlerModelRelated<T> implements GenericEditBeanHandler<T> {
		
	}

	/**
	 * 图片信息处理
	 */	
	public static class SimpleImageInfo {
	    private int height;
	    private int width;
	    private String mimeType;

	    public SimpleImageInfo(File file) throws IOException {
	        InputStream is = new FileInputStream(file);
	        try {
	            processStream(is);
	        } finally {
	            is.close();
	        }
	    }

	    public SimpleImageInfo(InputStream is) throws IOException {
	        processStream(is);
	    }

	    public SimpleImageInfo(byte[] bytes) throws IOException {
	        InputStream is = new ByteArrayInputStream(bytes);
	        try {
	            processStream(is);
	        } finally {
	            is.close();
	        }
	    }

	    private void processStream(InputStream is) throws IOException {
	        int c1 = is.read();
	        int c2 = is.read();
	        int c3 = is.read();

	        mimeType = null;
	        width = height = -1;

	        if (c1 == 'G' && c2 == 'I' && c3 == 'F') { // GIF
	            is.skip(3);
	            width = readInt(is,2,false);
	            height = readInt(is,2,false);
	            mimeType = "image/gif";
	        } else if (c1 == 0xFF && c2 == 0xD8) { // JPG
	            while (c3 == 255) {
	                int marker = is.read();
	                int len = readInt(is,2,true);
	                if (marker == 192 || marker == 193 || marker == 194) {
	                    is.skip(1);
	                    height = readInt(is,2,true);
	                    width = readInt(is,2,true);
	                    mimeType = "image/jpeg";
	                    break;
	                }
	                is.skip(len - 2);
	                c3 = is.read();
	            }
	        } else if (c1 == 137 && c2 == 80 && c3 == 78) { // PNG
	            is.skip(15);
	            width = readInt(is,2,true);
	            is.skip(2);
	            height = readInt(is,2,true);
	            mimeType = "image/png";
	        } else if (c1 == 66 && c2 == 77) { // BMP
	            is.skip(15);
	            width = readInt(is,2,false);
	            is.skip(2);
	            height = readInt(is,2,false);
	            mimeType = "image/bmp";
	        } else {
	            int c4 = is.read();
	            if ((c1 == 'M' && c2 == 'M' && c3 == 0 && c4 == 42)
	                    || (c1 == 'I' && c2 == 'I' && c3 == 42 && c4 == 0)) { //TIFF
	                boolean bigEndian = c1 == 'M';
	                int ifd = 0;
	                int entries;
	                ifd = readInt(is,4,bigEndian);
	                is.skip(ifd - 8);
	                entries = readInt(is,2,bigEndian);
	                for (int i = 1; i <= entries; i++) {
	                    int tag = readInt(is,2,bigEndian);
	                    int fieldType = readInt(is,2,bigEndian);
	                    int valOffset;
	                    if ((fieldType == 3 || fieldType == 8)) {
	                        valOffset = readInt(is,2,bigEndian);
	                        is.skip(2);
	                    } else {
	                        valOffset = readInt(is,4,bigEndian);
	                    }
	                    if (tag == 256) {
	                        width = valOffset;
	                    } else if (tag == 257) {
	                        height = valOffset;
	                    }
	                    if (width != -1 && height != -1) {
	                        mimeType = "image/tiff";
	                        break;
	                    }
	                }
	            }
	        }
	        if (mimeType == null) {
	            throw new IOException("Unsupported image type");
	        }
	    }
	    
	    private int readInt(InputStream is, int noOfBytes, boolean bigEndian) throws IOException {
	        int ret = 0;
	        int sv = bigEndian ? ((noOfBytes - 1) * 8) : 0;
	        int cnt = bigEndian ? -8 : 8;
	        for(int i=0;i<noOfBytes;i++) {
	            ret |= is.read() << sv;
	            sv += cnt;
	        }
	        return ret;
	    }

	    public int getHeight() {
	        return height;
	    }

	    public void setHeight(int height) {
	        this.height = height;
	    }

	    public int getWidth() {
	        return width;
	    }

	    public void setWidth(int width) {
	        this.width = width;
	    }

	    public String getMimeType() {
	        return mimeType;
	    }

	    public void setMimeType(String mimeType) {
	        this.mimeType = mimeType;
	    }

	    @Override
	    public String toString() {
	        return "MIME Type : " + mimeType + "\t Width : " + width + "\t Height : " + height;
	    }
	}
}
