/**
 * 
 */
package com.cccollector.universal.view;

import java.io.File;
import java.io.FileInputStream;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import org.primefaces.event.FileUploadEvent;
import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;

/**
 * 泛型编辑Bean类
 *
 * @author 谢朋
 * Copyright © 2015-2018年 北京华星成汇文化发展有限公司. All rights reserved.
 */
public abstract class GenericEditBean<T> extends BaseBean {
	
	/**
	 * 泛型编辑Bean处理器
	 */
	protected GenericEditBeanHandler<T> genericEditBeanHandler;
	
	/**
	 * 获取基础Bean处理器
	 */
	@Override
	public BaseBeanHandler getBaseBeanHandler() {
		return genericEditBeanHandler;
	}

	/**
	 * 是否使用对话框编辑
	 */
	private String useDialog;

	public String getUseDialog() {
		return useDialog;
	}

	public void setUseDialog(String _useDialog) {
		useDialog = _useDialog;
	}

	/**
	 * 是否正在使用对话框编辑
	 */
	public boolean getUsingDialog() {
		return useDialog != null && useDialog.equals("true");
	}

	/**
	 * 模型ID
	 */
	private String modelId;

	public String getModelId() {
		return modelId;
	}

	public void setModelId(String _modelId) {
		modelId = _modelId;
		
		// 新建或加载
		if (model == null) {
			Integer id = null;
			try {
				id = Integer.valueOf(modelId);
			} catch (Exception e) {}
			model = genericEditBeanHandler.loadModel(id);
		}
	}

	/**
	 * 模型
	 */
	private T model;

	public T getModel() {
		return model;
	}

	/**
	 * 图片文件路径映射
	 */
	private Map<Integer, String> pictureFilePathMap = new HashMap<>();

	/**
	 * 通过序号获取图片文件路径
	 * 
	 * @param index 序号
	 * @return 图片文件路径
	 */
	public String pictureFilePath(int index) {
		return pictureFilePathMap.get(index);
	}

	/**
	 * 图片图像映射
	 */
	private Map<Integer, StreamedContent> pictureImageMap = new HashMap<>();

	/**
	 * 通过序号获取图片图像
	 * 
	 * @param index 序号
	 * @return 图片图像
	 */
	public StreamedContent pictureImage(int index) {
		return pictureImageMap.get(index);
	}

	/**
	 * 图片信息映射
	 */
	private Map<Integer, SimpleImageInfo> pictureInfoMap = new HashMap<>();

	/**
	 * 通过序号获取图片信息
	 * 
	 * @param index 序号
	 * @return 图片信息
	 */
	public SimpleImageInfo pictureInfo(int index) {
		return pictureInfoMap.get(index);
	}

	/**
	 * 加载图片文件
	 * 
	 * @param index 序号
	 * @param pictureFilePath 图片文件路径
	 */
	public void loadPictureFile(int index, String pictureFilePath) {
		try {
			pictureFilePathMap.put(index, pictureFilePath);
			FileInputStream fileInputStream = new FileInputStream(pictureFilePath);
			pictureImageMap.put(index, new DefaultStreamedContent(fileInputStream));
			pictureInfoMap.put(index, new SimpleImageInfo(new File(pictureFilePath)));
		} catch (Exception e) {
			pictureFilePathMap.remove(index);
			pictureImageMap.remove(index);
			pictureInfoMap.remove(index);
		}
	}

	/**
	 * 处理图片文件上传
	 */
	public void handlePictureFileUpload(FileUploadEvent fileUploadEvent) {
		String clientId = fileUploadEvent.getComponent().getClientId();
		int index = Integer.parseInt(clientId.substring(clientId.indexOf("_") + 1));
		try {
			String webAppRootKey = stringFromConfig("paths.webAppRootKey");
			String webTemp = stringFromConfig("paths.webTemp");
			String tempPath = System.getProperty(webAppRootKey) + webTemp + File.separator;
			new File(tempPath).mkdirs();
			String tempFileName = new Date().getTime() + "_" + new Random().nextInt(10000);
			pictureFilePathMap.put(index, tempPath + tempFileName);
			fileUploadEvent.getFile().write(pictureFilePathMap.get(index));
			FileInputStream fileInputStream = new FileInputStream(pictureFilePathMap.get(index));
			pictureImageMap.put(index, new DefaultStreamedContent(fileInputStream));
			pictureInfoMap.put(index, new SimpleImageInfo(new File(pictureFilePathMap.get(index))));
		} catch (Exception e) {
			pictureFilePathMap.remove(index);
			pictureImageMap.remove(index);
			pictureInfoMap.remove(index);
		}
	}

	/**
	 * 泛型编辑Bean处理器模型
	 */
	public static abstract class GenericEditBeanHandlerModel<T> implements GenericEditBeanHandler<T> {

		@Override
		public Object loadRelatedModel(int index, int relatedModelId) {
			return null;
		}
	}

	/**
	 * 泛型编辑Bean处理器模型和相关
	 */
	public static abstract class GenericEditBeanHandlerModelRelated<T> implements GenericEditBeanHandler<T> {
		
	}
}
