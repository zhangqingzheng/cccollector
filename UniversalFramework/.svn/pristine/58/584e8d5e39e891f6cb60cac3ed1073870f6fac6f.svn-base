/**
 * 
 */
package com.cccollector.universal.view;

import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Pattern;

import javax.faces.bean.ManagedProperty;
import javax.faces.context.FacesContext;
import javax.servlet.http.HttpServletRequest;

import org.apache.cxf.jaxrs.swagger.Swagger2Feature;
import org.primefaces.PrimeFaces;
import org.springframework.security.web.WebAttributes;

/**
 * 模版基础Bean类
 *
 * @author 谢朋
 * Copyright © 2015-2018年 北京华星成汇文化发展有限公司. All rights reserved.
 */
public abstract class TemplateBaseBean extends BaseBean {

	/**
	 * apiSwagger2Feature
	 */
	@ManagedProperty(value = "#{apiSwagger2Feature}")
	private Swagger2Feature apiSwagger2Feature;

	public void setApiSwagger2Feature(Swagger2Feature _apiSwagger2Feature) {
		apiSwagger2Feature = _apiSwagger2Feature;
	}
	
	/**
	 * 获取头像缩略图URL
	 */
	public String getAvatarThumbnailUrl() {
		if (isLoginAuthentication() && getLoginUserDetail().getHasAvatar()) {
			String avatarFilePath = getLoginUserDetail().avatarFilePath();	
			return stringFromConfigApp("appManagement.userAvatarThumbnailUrl") + avatarFilePath;
		} else {
			return getRelativeRootPath() + "main/images/noAvatar.png";
		}
	}

	/**
	 * 获取当前年份
	 */
	public String getCurrentYear() {
		return Calendar.getInstance().get(Calendar.YEAR) + "";
	}	

	/**
	 * 获取接口文档地址
	 */
	public String getApiDocs() {
		return apiSwagger2Feature.getSchemes()[0] + "://" + apiSwagger2Feature.getHost() + apiSwagger2Feature.getBasePath() + "/api-docs?url=" + apiSwagger2Feature.getBasePath() + "/swagger.json";
	}
	
	/**
	 * 修改密码
	 */
	public void modifyPasswordAction() {
		// 对话框选项
		Map<String, Object> options = new HashMap<String, Object>();
		options.put("resizable", false);
		options.put("width", 360);
		options.put("contentWidth", "100%");
		options.put("includeViewParams", true);
		
		// 显示添加对话框
		PrimeFaces.current().dialog().openDynamic("/auth/modifyPassword", options, null);
    }
    
	/**
	 * 注销账户
	 */
	public void logoutAction() {
		try {
			FacesContext.getCurrentInstance().getExternalContext().redirect(getRelativeRootPath() + "logout/cas");
		} catch (Exception e) {}
	}
	
	/**
	 * 旧密码
	 */
	private String oldPassword;

	public String getOldPassword() {
		return oldPassword;
	}

	public void setOldPassword(String _oldPassword) {
		oldPassword = _oldPassword;
	}

	/**
	 * 新密码
	 */
	private String newPassword;

	public String getNewPassword() {
		return newPassword;
	}

	public void setNewPassword(String _newPassword) {
		newPassword = _newPassword;
	}

	/**
	 * 确认新密码
	 */
	private String confirmPassword;

	public String getConfirmPassword() {
		return confirmPassword;
	}

	public void setConfirmPassword(String _confirmPassword) {
		confirmPassword = _confirmPassword;
	}
	
	/**
	 * 更新密码
	 */
	public void updatePasswordAction() {
		if (newPassword.length() < 8 || confirmPassword.length() < 8) {
			addValidatingMessage("密码长度必须不少于8位，请符合规则！");
			return;
		}
		boolean match = Pattern.matches("^.*[A-Z]+.*$", newPassword) && Pattern.matches("^.*[a-z]+.*$", newPassword) && Pattern.matches("^.*[0-9]+.*$", newPassword);
		if (!match) {
			addValidatingMessage("新密码必须包含大小写字母和数字，请符合规则！");
			return;
		}
		if (!newPassword.equals(confirmPassword)) {
			addValidatingMessage("两次输入密码不一致，请重新输入！");
			return;
		}
		if (newPassword.equals(oldPassword)) {
			addValidatingMessage("新密码与原密码相同，请重新输入！");
			return;
		}
		
		boolean success = app_userDetailService.modifyPassword(getLoginUserDetail().getUserId(), oldPassword, newPassword);
		if (!success) {
			addValidatingMessage("修改密码失败，请核对之后重新输入！");
			return;
		}
		
		PrimeFaces.current().dialog().closeDynamic(null);
	}
	
	/**
	 * 获取认证失败消息
	 */
	public String getAuthenticationFailureMessage() {
		try {
			HttpServletRequest request = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();
			Exception exception = (Exception) request.getSession().getAttribute(WebAttributes.AUTHENTICATION_EXCEPTION);
			return exception.getMessage();
		} catch (Exception e) {
			return null;
		}
	}

	@Override
	public BaseBeanHandler getBaseBeanHandler() {
		return null;
	}
}
