/**
 * 
 */
package com.cccollector.app.view;

import java.util.Random;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;

import org.primefaces.context.RequestContext;

import com.cccollector.app.model.Edition;
import com.cccollector.app.model.Release;
import com.cccollector.app.service.EditionService;
import com.cccollector.app.service.ReleaseService;

/**
 * 发行Bean类
 *
 * @author 谢朋
 * Copyright © 2017年 北京华星成汇文化发展有限公司. All rights reserved.
 */
@ManagedBean
@ViewScoped
public class ReleaseBean {

	/**
	 * 发行服务
	 */
	@ManagedProperty(value = "#{releaseService}")
	private ReleaseService releaseService;

	public void setReleaseService(ReleaseService _releaseService) {
		releaseService = _releaseService;
	}

	/**
	 * 版本服务
	 */
	@ManagedProperty(value = "#{editionService}")
	private EditionService editionService;

	public void setEditionService(EditionService _editionService) {
		editionService = _editionService;
	}

	/**
	 * 发行ID
	 */
	private String releaseId;

	public String getReleaseId() {
		return releaseId;
	}

	public void setReleaseId(String _releaseId) {
		releaseId = _releaseId;
		
		// 新建或加载发行
		if (release == null) {
			Integer id = 0;
			try {
				id = Integer.valueOf(releaseId);
			} catch (Exception e) {}
			if (id == 0) {
				release = new Release();
				release.setStatus(Release.StatusEnum.未发布.ordinal());
				if (edition == null) {
					edition = new Edition();
				}
				release.setEdition(edition);
			} else {
				release = releaseService.loadById(id);
			}
		}
	}

	/**
	 * 发行
	 */
	private Release release;

	public Release getRelease() {
		return release;
	}

	/**
	 * 所属版本ID
	 */
	private String editionId;

	public String getEditionId() {
		return editionId;
	}

	public void setEditionId(String _editionId) {
		editionId = _editionId;
		
		// 加载版本
		Integer id = 0;
		try {
			id = Integer.valueOf(editionId);
		} catch (Exception e) {}
		if (id != 0) {
			edition = editionService.loadById(id);
		}
	}

	/**
	 * 所属版本
	 */
	private Edition edition;

	public Edition getEdition() {
		return edition;
	}
	
	/**
	 * 保存
	 */
	public void saveAction() {
		if (release.getReleaseId() == null) {
			// 设置密钥
			release.setSecretKey(randomString(32));
			
			// 添加发行
			Integer releaseId = releaseService.save(release);
			RequestContext.getCurrentInstance().closeDialog(releaseId != null ? Boolean.TRUE : Boolean.FALSE);
		} else {
			// 编辑发行
			Release releaseUpdated = releaseService.update(release);
			RequestContext.getCurrentInstance().closeDialog(releaseUpdated != null ? Boolean.TRUE : Boolean.FALSE);
		}
	}

	/**
	 * 随机生成包含数字、字母大小写的字符串
	 */
	private String randomString(int length) {
        String value = "";  
        Random random = new Random();  
           
        for (int i = 0; i < length; i++) {  
            String charOrNum = random.nextInt(2) % 2 == 0 ? "char" : "num";  
            // 输出字母还是数字  
            if ("char".equalsIgnoreCase(charOrNum)) {  
                // 输出大写字母或小写字母 
                int temp = random.nextInt(2) % 2 == 0 ? 65 : 97;  
                value += (char) (random.nextInt(26) + temp);  
            } else if ("num".equalsIgnoreCase(charOrNum)) {  
                value += String.valueOf(random.nextInt(10));  
            }  
        }  
        return value;
	}
}
