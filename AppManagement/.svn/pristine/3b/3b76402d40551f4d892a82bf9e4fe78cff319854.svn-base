/**
 * 
 */
package com.cccollector.app.view;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;

import org.primefaces.component.treetable.TreeTable;
import org.primefaces.event.CellEditEvent;
import org.primefaces.model.DefaultTreeNode;
import org.primefaces.model.TreeNode;

import com.cccollector.app.model.Department;
import com.cccollector.universal.dao.QueryField;
import com.cccollector.universal.view.GenericListBean;

/**
 * 部门列表Bean类
 *
 * @author 谢朋
 * Copyright © 2015-2018年 北京华星成汇文化发展有限公司. All rights reserved.
 */
@ManagedBean
@ViewScoped
public class DepartmentListBean extends BaseListBean<Department> {
	
	public DepartmentListBean() {
		modelDisplayName = "部门";
		modelAttributeName = "department";
		modelIdAttributeName = "departmentId";
		submodelAttributeName = "job";
		genericListBeanHandler = new GenericListBean.GenericListBeanHandlerAll<Department>() {

			@Override
			public List<Department> loadAllModelList() {
				List<QueryField> orderQueryFieldList = new ArrayList<QueryField>();
				orderQueryFieldList.add(new QueryField("code", true));
				return departmentService.loadAll(orderQueryFieldList);
			}
		};
	}

	/**
	 * 根部门TreeNode
	 */
	private TreeNode rootDepartmentTreeNode;

	public TreeNode getRootDepartmentTreeNode() {
		if (rootDepartmentTreeNode == null) {
			Map<Integer, TreeNode> treeNodeMap = new HashMap<Integer, TreeNode>();
			// 根部门TreeNode
			Department rootDepartment = new Department();
			rootDepartment.setDepartmentId(0);
			rootDepartmentTreeNode = new DefaultTreeNode(rootDepartment);
			
			// 根据部门生成TreeNode
			for (Department department : getAllModels()) {
				TreeNode parentTreeNode = department.getParentDepartment() == null ? rootDepartmentTreeNode : treeNodeMap.get(department.getParentDepartment().getDepartmentId());
				TreeNode treeNode = new DefaultTreeNode(department, parentTreeNode);
				treeNodeMap.put(department.getDepartmentId(), treeNode);
			}
		}
		return rootDepartmentTreeNode;
	}
	
	/**
	 * 选中的部门TreeNode
	 */
	private TreeNode selectedDepartmentTreeNode;

	public TreeNode getSelectedDepartmentTreeNode() {
		return selectedDepartmentTreeNode;
	}

	public void setSelectedDepartmentTreeNode(TreeNode _selectedDepartmentTreeNode) {
		selectedDepartmentTreeNode = _selectedDepartmentTreeNode;
	}
	
	/**
	 * 添加部门
	 */
	public void addDepartmentAction() {
		// 创建部门对象
		Department department = new Department();
		// 将选中的部门设置为父部门
		if (selectedDepartmentTreeNode != null) {
			department.setParentDepartment((Department) selectedDepartmentTreeNode.getData());
		}

		// 添加部门
		departmentService.addDepartment(department);
		addInfoMessage("添加部门成功！");
		
		// 添加部门TreeNode
		if (selectedDepartmentTreeNode != null) {
			new DefaultTreeNode(department, selectedDepartmentTreeNode);
			// 展开父TreeNode
			selectedDepartmentTreeNode.setExpanded(true);
		} else {
			new DefaultTreeNode(department, rootDepartmentTreeNode);
		}
	}

	/**
	 * 编辑部门
	 */
	public void onCellEdit(CellEditEvent event) {
		// 获取旧值和修改后的值
		Object oldValue = event.getOldValue();
		Object newValue = event.getNewValue();
		if (newValue == null || newValue.equals(oldValue)) {
			return;
		}

		// 获取当前编辑的部门
		TreeTable treeTable = (TreeTable) event.getSource();
		TreeNode rowNode = treeTable.getRowNode();
		Department department = (Department) rowNode.getData();
		// 获取当前编辑的列，并将对应属性设置为修改后的值
		String departmentHeaderText = event.getColumn().getHeaderText();
		if (departmentHeaderText.equals("名称")) {
			department.setName((String) newValue);
		} else if (departmentHeaderText.equals("是否有徽章")) {
			department.setHasBadge((Boolean) newValue);
		} else if (departmentHeaderText.equals("是否独立机构")) {
			department.setIsIndependent((Boolean) newValue);
		} else if (departmentHeaderText.equals("备注")) {
			department.setRemarks((String) newValue);
		}

		// 编辑部门
		departmentService.update(department);
		addInfoMessage("编辑部门成功！");
	}

	/**
	 * 管理岗位
	 */
	public void manageJobsAction(Department department) {
		handleNavigation(submodelAttributeName + "List.xhtml?" + modelIdAttributeName + "=" + department.getDepartmentId());
	}
	
	/**
	 * 管理角色和权限
	 */
	public void manageRolesAndPermissionsAction(Department department) {
		try {
			handleNavigation("roleAndPermissionList.xhtml?" + modelIdAttributeName + "=" + department.getDepartmentId());
		} catch (Exception e) {}
	}
	
	/**
	 * 删除部门
	 */
	public void deleteDepartmentAction(Department department) {
		// 部门如果否包含子对象，则不能被删除
		if (departmentService.hasChildren(department)) {
			addErrorMessage("要删除的部门中包含子对象，请清空子对象再进行删除！");
			return;
		}

		// 删除部门
		departmentService.delete(department);
		addInfoMessage("删除部门成功！");
		
		// 清空选中的TreeNode
		selectedDepartmentTreeNode = null;
		// 刷新全部模型
		allModels = null;
		// 刷新根部门TreeNode
		rootDepartmentTreeNode = null;
	}

	/**
	 * 删除部门
	 */
	public void deleteDepartmentAction() {
		if (selectedDepartmentTreeNode == null) {
			addErrorMessage("请选择一个部门进行删除！");
		}
		
		// 部门如果否包含子对象，则不能被删除
		Department department = (Department) selectedDepartmentTreeNode.getData();
		if (departmentService.hasChildren(department)) {
			addErrorMessage("要删除的部门中包含子对象，请清空子对象再进行删除！");
			return;
		}

		// 删除部门
		departmentService.delete(department);
		addInfoMessage("删除部门成功！");
		// 将选中的TreeNode从父TreeNode中删除
		selectedDepartmentTreeNode.getParent().getChildren().remove(selectedDepartmentTreeNode);
	
		// 清空选中的TreeNode
		selectedDepartmentTreeNode = null;
	}
}
