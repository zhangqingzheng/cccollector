/**
 * 
 */
package com.cccollector.app.service.impl;

import java.io.File;
import java.util.Calendar;
import java.util.Date;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.cccollector.app.dao.CertificateDao;
import com.cccollector.app.model.Certificate;
import com.cccollector.app.service.CertificateService;
import com.cccollector.universal.service.GenericServiceHibernateImpl;

/**
 * 证书服务实现类
 *
 * @author 谢朋
 * Copyright © 2015-2018年 北京华星成汇文化发展有限公司. All rights reserved.
 */
@Service("certificateService")
public class CertificateServiceImpl extends GenericServiceHibernateImpl<Integer, Certificate> implements CertificateService {
	
	@Autowired
	private CertificateDao certificateDao;
	
	/**
	 * 平台标识符
	 */
	@Value("${platformBundleId}")
	private String platformBundleId;
	
	/**
	 * Tomcat数据目录
	 */
	@Value("${paths.tomcatDataPath}")
	private String tomcatDataPath;
	
	/**
	 * 证书有效天数
	 */
	@Value("${certificate.validDays}")
	private Integer validDays;
	
	/**
	 * 证书创建命令
	 */
	@Value("${certificate.createCommand}")
	private String createCommand;

	@Override
	public String getDataPath() {
		return tomcatDataPath + platformBundleId + File.separator;
	}

	@Override
	public Integer saveCertificate(Certificate certificate) {
		// 设置PKCS密码
		certificate.setPassword(RootCertificateServiceImpl.createRandomPassword(10));
		
		// 设置签发时间
		certificate.setIssueTime(new Date());
		
		// 设置过期时间
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(certificate.getIssueTime());
		calendar.add(Calendar.DAY_OF_MONTH, validDays);
		certificate.setExpirationTime(calendar.getTime());

		// 保存证书
		Integer certificateId = certificateDao.save(certificate);				

		// 创建证书
		try {    
			String dataPath = getDataPath();
			String command = createCommand
					.replace("@{runtime.certificate.certificatePath}", dataPath + certificate.getCertificateFilePath())
					.replace("@{runtime.certificate.keyFile}", dataPath + certificate.keyFilePath())
					.replace("@{runtime.certificate.requestFile}", dataPath + certificate.requestFilePath())
					.replace("@{runtime.certificate.certificateFile}", dataPath + certificate.certificateFilePath())
					.replace("@{runtime.certificate.user}", certificate.getOwnerName() + "~" + certificate.getOwnerId() + "~" + certificateId)
					.replace("@{runtime.certificate.rootUser}", platformBundleId)
					.replace("@{runtime.certificate.rootKeyFile}", dataPath + certificate.getRootCertificate().rootKeyFilePath())
					.replace("@{runtime.certificate.rootCertificateFile}", dataPath + certificate.getRootCertificate().rootCertificateFilePath())
					.replace("@{runtime.certificate.validDays}", validDays.toString())
					.replace("@{runtime.certificate.keyPKCS8File}", dataPath + certificate.keyPKCS8FilePath())
					.replace("@{runtime.certificate.certificateWithKeyPKCS8File}", dataPath + certificate.certificateWithKeyPKCS8FilePath())
					.replace("@{runtime.certificate.password}", certificate.getPassword())
					.replace("@{runtime.certificate.certificateWithKeyPKCS12File}", dataPath + certificate.certificateWithKeyPKCS12FilePath());
		    Process process = null;
		    if (File.separator.equals("/")) {
			    process = Runtime.getRuntime().exec(new String[] { "/bin/sh", "-c", command });
		    } else {
			    process = Runtime.getRuntime().exec("cmd /c C:" + command);
		    }
		    process.waitFor();
		    return certificateId;
		} catch(Exception e) {
		    e.printStackTrace();
		    return null;
		}
	}
}
