/**
 * 
 */
package com.cccollector.app.view;

import java.util.ArrayList;
import java.util.List;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;

import com.cccollector.app.model.Platform;
import com.cccollector.app.model.Role;
import com.cccollector.universal.dao.QueryField;
import com.cccollector.universal.view.GenericListBean;

/**
 * 角色列表Bean类
 *
 * @author 谢朋
 * Copyright © 2018年 北京华星成汇文化发展有限公司. All rights reserved.
 */
@ManagedBean
@ViewScoped
public class RoleListBean extends BaseListBean<Role> {
	public RoleListBean() {
		modelDisplayName = "角色";
		modelAttributeName = "role";
		modelIdAttributeName = "roleId";
		genericListBeanHandler = new GenericListBean.GenericListBeanHandlerRelatedAll<Role>() {

			@Override
			public Object loadRelatedModel(int index, int relatedModelId) {
				if (index == 1) {
					return platformService.loadById(relatedModelId);
				} 
				return null;
			}

			@Override
			public List<Role> loadAllModelList() {
				// 查询条件
				List<QueryField> predicateQueryFieldList = new ArrayList<QueryField>();
				predicateQueryFieldList.add(new QueryField("platform", new QueryField("platformId", getPlatform().getPlatformId())));
				
				// 排序
				List<QueryField> orderQueryFieldList = new ArrayList<QueryField>();
				orderQueryFieldList.add(new QueryField("position", Boolean.TRUE));
				return roleService.loadAll(predicateQueryFieldList, orderQueryFieldList);
			}
		};
	}
	
	/**
	 * 所属平台
	 */
	public Platform getPlatform() {
		return (Platform) relatedModel(1);
	}

	/**
	 * 修改角色是否可用
	 */
	public void modifyRolesEnabledAction(boolean enabled) {
		if (getSelectedModels() != null && getSelectedModels().size() > 0) {
			for (Role role : getSelectedModels()) {
				role.setEnabled(enabled);
				roleService.update(role, "enabled");
			}
			addInfoMessage("修改角色是否可用成功！");
		} else {
			addErrorMessage("请选择一个或多个角色进行修改！");
		}
		
		// 刷新全部角色数据
		allModels = null;
	}
	
	/**
	 * 管理岗位
	 */
	public void manageJobsAction(Role role) {
		handleNavigation("jobList.xhtml?roled=" + role.getRoleId() + "&paltformId=" + getModelId1());
	}
	
	/**
	 * 删除角色
	 */
    public void deleteRoleAction(Role role) {
		// 角色如果否包含子对象，则不能被删除
		if (roleService.hasChildren(role)) {
			addErrorMessage("要删除的角色中包含子对象，请清空子对象再进行删除！");
			return;
		}
		// 删除角色
		roleService.delete(role);
		addInfoMessage("删除角色成功！");
		
		// 清空选中的模型
		setSelectedModels(null);
		// 刷新全部角色数据
		allModels = null;
	}
	
	/**
	 * 批量删除角色
	 */
	public void deleteRolesAction() {
		if (getSelectedModels() == null || getSelectedModels().size() == 0) {
			addErrorMessage("请选择一个或多个角色进行删除！");
			return;
		}
	
		// 角色如果否包含子对象，则不能被删除
		for (Role role : getSelectedModels()) {
			if (roleService.hasChildren(role)) {
				addErrorMessage("要删除的角色中包含子对象，请清空子对象再进行删除！");
				return;
			}
		}
		
		// 删除角色
		roleService.deleteAll(getSelectedModels());
		addInfoMessage("删除角色成功！");
		
		// 清空选中的模型
		setSelectedModels(null);
		// 刷新全部角色数据
		allModels = null;
	}
}
