/**
 * 
 */
package com.cccollector.app.view;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;

import org.primefaces.context.RequestContext;
import org.primefaces.event.SelectEvent;

import com.cccollector.app.model.Platform;
import com.cccollector.app.model.Role;
import com.cccollector.app.service.PlatformService;
import com.cccollector.app.service.RoleService;
import com.cccollector.universal.dao.QueryField;

/**
 * 角色列表Bean类
 *
 * @author 谢朋
 * Copyright © 2017年 北京华星成汇文化发展有限公司. All rights reserved.
 */
@ManagedBean
@ViewScoped
public class RoleListBean {

	/**
	 * 角色服务
	 */
	@ManagedProperty(value = "#{roleService}")
	private RoleService roleService;

	public void setRoleService(RoleService _roleService) {
		roleService = _roleService;
	}

	/**
	 * 平台服务
	 */
	@ManagedProperty(value = "#{platformService}")
	private PlatformService platformService;

	public void setPlatformService(PlatformService _platformService) {
		platformService = _platformService;
	}

	/**
	 * 所属平台ID
	 */
	private String platformId;

	public String getPlatformId() {
		return platformId;
	}

	public void setPlatformId(String _platformId) {
		platformId = _platformId;
		
		// 加载平台
		Integer id = 0;
		try {
			id = Integer.valueOf(platformId);
		} catch (Exception e) {}
		if (id != 0) {
			platform = platformService.loadById(id);
		}
	}

	/**
	 * 所属平台
	 */
	private Platform platform;

	public Platform getPlatform() {
		return platform;
	}
	
	/**
	 * 角色是否多选
	 */
	private boolean rolesMultiSelect;

	public boolean getRolesMultiSelect() {
		return rolesMultiSelect;
	}

	public void setRolesMultiSelect(boolean _rolesMultiSelect) {
		rolesMultiSelect = _rolesMultiSelect;
	}

	/**
	 * 全部角色
	 */
	private List<Role> allRoles;

	public List<Role> getAllRoles() {
		if (allRoles == null) {
			// 查询条件
			List<QueryField> predicateQueryFieldList = null;
			if (platform != null) {
				predicateQueryFieldList = new ArrayList<QueryField>();
				predicateQueryFieldList.add(new QueryField("platform", new QueryField("platformId", platform.getPlatformId())));
			}

			// 排序
			List<QueryField> orderQueryFieldList = new ArrayList<QueryField>();
			orderQueryFieldList.add(new QueryField("roleId", Boolean.TRUE));
			
			allRoles = roleService.loadAll(predicateQueryFieldList, orderQueryFieldList);
		}
		return allRoles;
	}

	/**
	 * 选中的角色
	 */
	private List<Role> selectedRoles;

	public List<Role> getSelectedRoles() {
		return selectedRoles;
	}

	public void setSelectedRoles(List<Role> _selectedRoles) {
		selectedRoles = _selectedRoles;
	}
	
	/**
	 * 添加角色
	 */
	public void addRoleAction() {
		// 对话框选项
		Map<String, Object> options = new HashMap<String, Object>();
		options.put("width", 360);
		options.put("resizable", false);
		options.put("modal", true);
		options.put("includeViewParams", true);
		
		// 传递的参数
		Map<String, List<String>> params = new HashMap<String, List<String>>();
		List<String> param = new ArrayList<String>();
		param.add("");
		params.put("roleId", param);
		
		// 显示编辑角色对话框
		RequestContext.getCurrentInstance().openDialog("roleEdit", options, params);
	}
	
	/**
	 * 处理添加角色返回
	 */
	public void handleAddRoleReturn(SelectEvent event) {
		Boolean success = (Boolean) event.getObject();
		FacesContext facesContext = FacesContext.getCurrentInstance();
		if (success == true) {
			// 清空选中的角色
			selectedRoles = null;
			facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "提示信息", "添加角色成功！"));
		} else {
			facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "错误提示", "添加角色失败，请重新尝试！"));
		}
		
		// 刷新全部角色数据
		allRoles = null;
	}
	
	/**
	 * 编辑角色
	 */
	public void editRoleAction(Role role) {
		// 对话框选项
		Map<String, Object> options = new HashMap<String, Object>();
		options.put("width", 360);
		options.put("resizable", false);
		options.put("modal", true);
		options.put("includeViewParams", true);
		
		// 传递的参数
		Map<String, List<String>> params = new HashMap<String, List<String>>();
		List<String> param = new ArrayList<String>();
		param.add(role.getRoleId().toString());
		params.put("roleId", param);
		
		// 显示编辑角色对话框
		RequestContext.getCurrentInstance().openDialog("roleEdit", options, params);
	}
	
	/**
	 * 编辑角色
	 */
	public void editRoleAction() {
		FacesContext facesContext = FacesContext.getCurrentInstance();
		if (selectedRoles != null && selectedRoles.size() > 0) {
			if (selectedRoles.size() == 1) {
				// 对话框选项
				Map<String, Object> options = new HashMap<String, Object>();
				options.put("width", 360);
				options.put("resizable", false);
				options.put("modal", true);
				options.put("includeViewParams", true);
				
				// 传递的参数
				Map<String, List<String>> params = new HashMap<String, List<String>>();
				List<String> param = new ArrayList<String>();
				param.add(selectedRoles.get(0).getRoleId().toString());
				params.put("roleId", param);
				
				// 显示编辑角色对话框
				RequestContext.getCurrentInstance().openDialog("roleEdit", options, params);
			} else {
				facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "错误提示", "只能选择一个角色进行编辑！"));
			}
		} else {
			facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "错误提示", "请选择一个角色进行编辑！"));
		}
	}
	
	/**
	 * 处理编辑角色返回
	 */
	public void handleEditRoleReturn(SelectEvent event) {
		Boolean success = (Boolean) event.getObject();
		FacesContext facesContext = FacesContext.getCurrentInstance();
		if (success == true) {
			facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "提示信息", "编辑角色成功！"));
		} else {
			facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "错误提示", "编辑角色失败，请重新尝试！"));
		}
		
		// 刷新全部角色数据
		allRoles = null;
	}
	
	/**
	 * 修改角色是否可用
	 */
	public void modifyRolesEnabledAction(boolean enabled) {
		FacesContext facesContext = FacesContext.getCurrentInstance();
		if (selectedRoles != null && selectedRoles.size() > 0) {
			for (Role role : selectedRoles) {
				role.setEnabled(enabled);
				roleService.update(role, "enabled");
			}
			facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "提示信息", "修改角色是否可用成功！"));
		} else {
			facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "错误提示", "请选择一个或多个角色进行修改！"));
		}
		
		// 刷新全部角色数据
		allRoles = null;
	}
	
	/**
	 * 删除角色
	 */
    public void deleteRoleAction(Role role) {
		FacesContext facesContext = FacesContext.getCurrentInstance();
		// 角色如果否包含子对象，则不能被删除
		if (roleService.hasChildren(role)) {
			facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "错误提示", "要删除的角色中包含子对象，请清空子对象再进行删除！"));
			return;
		}
	
		// 删除角色
		roleService.delete(role);
		selectedRoles = null;
		facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "提示信息", "删除角色成功！"));

		// 刷新全部角色数据
		allRoles = null;
	}
	
	/**
	 * 批量删除角色
	 */
	public void deleteRolesAction() {
		FacesContext facesContext = FacesContext.getCurrentInstance();
		if (selectedRoles != null && selectedRoles.size() > 0) {
			// 角色如果否包含子对象，则不能被删除
			for (Role role : selectedRoles) {
				if (roleService.hasChildren(role)) {
					facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "错误提示", "要删除的角色中包含子对象，请清空子对象再进行删除！"));
					return;
				}
			}
			
			// 删除角色
			roleService.deleteAll(selectedRoles);
			selectedRoles = null;
			facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "提示信息", "删除角色成功！"));
		} else {
			facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "错误提示", "请选择一个或多个角色进行删除！"));
		}
		
		// 刷新全部角色数据
		allRoles = null;
	}
}
