/**
 * 
 */
package com.cccollector.app.view;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;

import org.primefaces.context.RequestContext;
import org.primefaces.event.ReorderEvent;
import org.primefaces.event.SelectEvent;

import com.cccollector.app.model.Release;
import com.cccollector.app.model.Resource;
import com.cccollector.app.service.ReleaseService;
import com.cccollector.app.service.ResourceService;
import com.cccollector.universal.dao.QueryField;
import com.cccollector.universal.dao.QueryField.PredicateEnum;

/**
 * 资源列表Bean类
 *
 * @author 谢朋
 * Copyright © 2017年 北京华星成汇文化发展有限公司. All rights reserved.
 */
@ManagedBean
@ViewScoped
public class ResourceListBean {

	/**
	 * 资源服务
	 */
	@ManagedProperty(value = "#{resourceService}")
	private ResourceService resourceService;

	public void setResourceService(ResourceService _resourceService) {
		resourceService = _resourceService;
	}

	/**
	 * 发行服务
	 */
	@ManagedProperty(value = "#{releaseService}")
	private ReleaseService releaseService;

	public void setReleaseService(ReleaseService _releaseService) {
		releaseService = _releaseService;
	}	

	/**
	 * 所属发行ID
	 */
	private String releaseId;

	public String getReleaseId() {
		return releaseId;
	}

	public void setReleaseId(String _releaseId) {
		releaseId = _releaseId;
		
		// 加载发行
		Integer id = 0;
		try {
			id = Integer.valueOf(releaseId);
		} catch (Exception e) {}
		if (id != 0) {
			release = releaseService.loadById(id);
		}
	}

	/**
	 * 所属发行
	 */
	private Release release;

	public Release getRelease() {
		return release;
	}

	/**
	 * 所属版本ID
	 */
	private String editionId;

	public String getEditionId() {
		return editionId;
	}

	public void setEditionId(String _editionId) {
		editionId = _editionId;
	}

	/**
	 * 所属应用ID
	 */
	private String appId;

	public String getAppId() {
		return appId;
	}

	public void setAppId(String _appId) {
		appId = _appId;
	}

	/**
	 * 所属平台ID
	 */
	private String platformId;

	public String getPlatformId() {
		return platformId;
	}

	public void setPlatformId(String _platformId) {
		platformId = _platformId;
	}
	
	/**
	 * 资源是否多选
	 */
	private boolean resourcesMultiSelect;
	
	public boolean getResourcesMultiSelect() {
		return resourcesMultiSelect;
	}

	public void setResourcesMultiSelect(boolean _resourcesMultiSelect) {
		resourcesMultiSelect = _resourcesMultiSelect;
	}

	/**
	 * 全部资源
	 */
	private List<Resource> allResources;

	public List<Resource> getAllResources() {
		if (allResources == null) {
			// 查询条件
			List<QueryField> predicateQueryFieldList = null;
			if (release != null) {
				predicateQueryFieldList = new ArrayList<QueryField>();
				predicateQueryFieldList.add(new QueryField("release", new QueryField("releaseId", release.getReleaseId())));
			}

			// 排序
			List<QueryField> orderQueryFieldList = new ArrayList<QueryField>();
			orderQueryFieldList.add(new QueryField("platformId", Boolean.TRUE));			
			orderQueryFieldList.add(new QueryField("type", Boolean.TRUE));
			orderQueryFieldList.add(new QueryField("position", Boolean.TRUE));
			
			allResources = resourceService.loadAll(predicateQueryFieldList, orderQueryFieldList);
		}
		return allResources;
	}

	/**
	 * 选中的资源
	 */
	private List<Resource> selectedResources;

	public List<Resource> getSelectedResources() {
		return selectedResources;
	}

	public void setSelectedResources(List<Resource> _selectedResources) {
		selectedResources = _selectedResources;
	}

	/**
	 * 选中的发行ID
	 */
	private Integer selectedReleaseId;

	public Integer getSelectedReleaseId() {
		return selectedReleaseId;
	}

	public void setSelectedReleaseId(Integer _selectedReleaseId) {
		selectedReleaseId = _selectedReleaseId;
	}

	/**
	 * 全部发行
	 */
	private List<Release> allReleases;

	public List<Release> getAllReleases() {
		if (allReleases == null) {
			// 查询同一应用下是否还有其他已发布发行
			List<QueryField> predicateQueryFieldList = new ArrayList<QueryField>();
			predicateQueryFieldList.add(new QueryField("edition", new QueryField("app", new QueryField("appId", release.getEdition().getApp().getAppId()))));
			predicateQueryFieldList.add(new QueryField("releaseId", release.getReleaseId(), PredicateEnum.NOT_EQUAL));
			predicateQueryFieldList.add(new QueryField("status", Release.StatusEnum.已发布.ordinal()));
			Long releaseCount = releaseService.count(predicateQueryFieldList);
			
			if (releaseCount > 0) {
				// 如果同一应用下还有其他已发布发行，则返回同一应用下的其他已发布发行
				List<QueryField> orderQueryFieldList = new ArrayList<QueryField>();
				orderQueryFieldList.add(new QueryField("edition", new QueryField("osType", Boolean.TRUE)));
				orderQueryFieldList.add(new QueryField("edition", new QueryField("os", Boolean.TRUE)));
				orderQueryFieldList.add(new QueryField("releaseDate", Boolean.FALSE));
				allReleases = releaseService.loadAll(predicateQueryFieldList, orderQueryFieldList);
			} else {
				// 如果同一应用下没有其他已发布发行，则返回其他应用的全部已发布发行
				predicateQueryFieldList = new ArrayList<QueryField>();
				predicateQueryFieldList.add(new QueryField("edition", new QueryField("app", new QueryField("appId", release.getEdition().getApp().getAppId(), PredicateEnum.NOT_EQUAL))));
				predicateQueryFieldList.add(new QueryField("status", Release.StatusEnum.已发布.ordinal()));
				List<QueryField> orderQueryFieldList = new ArrayList<QueryField>();
				orderQueryFieldList.add(new QueryField("edition", new QueryField("app", new QueryField("name", Boolean.TRUE))));
				orderQueryFieldList.add(new QueryField("edition", new QueryField("osType", Boolean.TRUE)));
				orderQueryFieldList.add(new QueryField("edition", new QueryField("os", Boolean.TRUE)));
				orderQueryFieldList.add(new QueryField("releaseDate", Boolean.FALSE));
				allReleases = releaseService.loadAll(predicateQueryFieldList, orderQueryFieldList);
			}
		}
		return allReleases;
	}

	/**
	 * 复制资源
	 */
	public void copyResourcesAction() {
		FacesContext facesContext = FacesContext.getCurrentInstance();
		if (selectedReleaseId == null) {
			facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "错误提示", "请选择一个发行进行复制！"));
			return;
		}
		
		// 查询资源
		List<QueryField> predicateQueryFieldList = new ArrayList<QueryField>();
		predicateQueryFieldList.add(new QueryField("release", new QueryField("releaseId", selectedReleaseId)));
		List<QueryField> orderQueryFieldList = new ArrayList<QueryField>();
		orderQueryFieldList.add(new QueryField("platformId", Boolean.TRUE));			
		orderQueryFieldList.add(new QueryField("type", Boolean.TRUE));
		orderQueryFieldList.add(new QueryField("position", Boolean.TRUE));
		List<Resource> resourcesToCopy = resourceService.loadAll(predicateQueryFieldList, orderQueryFieldList);
		
		// 复制资源
		for (Resource resource : resourcesToCopy) {
			// 设置排序位置
			predicateQueryFieldList = new ArrayList<QueryField>();
			predicateQueryFieldList.add(new QueryField("release", new QueryField("releaseId", release.getReleaseId())));
			predicateQueryFieldList.add(new QueryField("platformId", resource.getPlatformId()));
			predicateQueryFieldList.add(new QueryField("type", resource.getType()));
			Integer position = resourceService.max("position", predicateQueryFieldList);
			resource.setPosition(position == null ? 0 : position.intValue() + 1);		
			
			// 重置资源ID
			resource.setResourceId(null);
			
			// 重置所属发行
			resource.setRelease(release);
			
			// 添加资源
			resourceService.save(resource);
		}
		selectedResources = null;
		facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "提示信息", "复制资源成功！"));
		
		// 刷新全部资源数据
		allResources = null;
	}

	/**
	 * 添加资源
	 */
	public void addResourceAction() {
		// 对话框选项
		Map<String, Object> options = new HashMap<String, Object>();
		options.put("width", 360);
		options.put("resizable", false);
		options.put("modal", true);
		options.put("includeViewParams", true);
		
		// 传递的参数
		Map<String, List<String>> params = new HashMap<String, List<String>>();
		List<String> param = new ArrayList<String>();
		param.add("");
		params.put("resourceId", param);
		
		// 显示编辑资源对话框
		RequestContext.getCurrentInstance().openDialog("resourceEdit", options, params);
	}
	
	/**
	 * 处理添加资源返回
	 */
	public void handleAddResourceReturn(SelectEvent event) {
		Boolean success = (Boolean) event.getObject();
		FacesContext facesContext = FacesContext.getCurrentInstance();
		if (success == true) {
			// 清空选中的资源
			selectedResources = null;
			facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "提示信息", "添加资源成功！"));
		} else {
			facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "错误提示", "添加资源失败，请重新尝试！"));
		}
		
		// 刷新全部资源数据
		allResources = null;
	}
	
	/**
	 * 编辑资源
	 */
	public void editResourceAction(Resource resource) {
		// 对话框选项
		Map<String, Object> options = new HashMap<String, Object>();
		options.put("width", 360);
		options.put("resizable", false);
		options.put("modal", true);
		options.put("includeViewParams", true);
		
		// 传递的参数
		Map<String, List<String>> params = new HashMap<String, List<String>>();
		List<String> param = new ArrayList<String>();
		param.add(resource.getResourceId().toString());
		params.put("resourceId", param);
		
		// 显示编辑资源对话框
		RequestContext.getCurrentInstance().openDialog("resourceEdit", options, params);
	}
	
	/**
	 * 编辑资源
	 */
	public void editResourceAction() {
		FacesContext facesContext = FacesContext.getCurrentInstance();
		if (selectedResources != null && selectedResources.size() > 0) {
			if (selectedResources.size() == 1) {
				// 对话框选项
				Map<String, Object> options = new HashMap<String, Object>();
				options.put("width", 360);
				options.put("resizable", false);
				options.put("modal", true);
				options.put("includeViewParams", true);
				
				// 传递的参数
				Map<String, List<String>> params = new HashMap<String, List<String>>();
				List<String> param = new ArrayList<String>();
				param.add(selectedResources.get(0).getResourceId().toString());
				params.put("resourceId", param);
				
				// 显示编辑资源对话框
				RequestContext.getCurrentInstance().openDialog("resourceEdit", options, params);
			} else {
				facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "错误提示", "只能选择一个资源进行编辑！"));
			}
		} else {
			facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "错误提示", "请选择一个资源进行编辑！"));
		}
	}
	
	/**
	 * 处理编辑资源返回
	 */
	public void handleEditResourceReturn(SelectEvent event) {
		Boolean success = (Boolean) event.getObject();
		FacesContext facesContext = FacesContext.getCurrentInstance();
		if (success == true) {
			facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "提示信息", "编辑资源成功！"));
		} else {
			facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "错误提示", "编辑资源失败，请重新尝试！"));
		}
		
		// 刷新全部资源数据
		allResources = null;
	}
	
	/**
	 * 移动资源
	 */
	public void moveResourceAction(ReorderEvent event) {
		// 更新全部资源的排序位置
		Map<Integer, Map<Integer, Integer>> positionMap = new HashMap<>();
		for (Resource resource : allResources) {
			Map<Integer, Integer> platformPositionMap = positionMap.get(resource.getPlatformId());
			if (platformPositionMap == null) {
				platformPositionMap = new HashMap<Integer, Integer>();
				platformPositionMap.put(Resource.TypeEnum.接口.ordinal(), 0);
				platformPositionMap.put(Resource.TypeEnum.路径.ordinal(), 0);
				positionMap.put(resource.getPlatformId(), platformPositionMap);
			}
			int position = platformPositionMap.get(resource.getType());
			resource.setPosition(position);
			resourceService.update(resource, "position");
			platformPositionMap.put(resource.getType(), position + 1);
		}
		FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "提示信息", "移动资源成功！"));
		
		// 刷新全部资源数据
		allResources = null;
	}
	
	/**
	 * 删除资源
	 */
	public void deleteResourceAction(Resource resource) {
		// 删除资源
		resourceService.delete(resource);
		selectedResources = null;
		FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "提示信息", "删除资源成功！"));
		
		// 刷新全部资源数据
		allResources = null;
	}
	
	/**
	 * 批量删除资源
	 */
	public void deleteResourcesAction() {
		FacesContext facesContext = FacesContext.getCurrentInstance();
		if (selectedResources != null && selectedResources.size() > 0) {
			// 删除资源
			resourceService.deleteAll(selectedResources);
			selectedResources = null;
			facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "提示信息", "删除资源成功！"));
		} else {
			facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "错误提示", "请选择一个或多个资源进行删除！"));
		}
		
		// 刷新全部资源数据
		allResources = null;
	}
}
