/**
 * 
 */
package com.cccollector.app.view;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;

import org.primefaces.context.RequestContext;

import com.cccollector.app.model.Certificate;
import com.cccollector.app.model.Platform;
import com.cccollector.app.model.RootCertificate;
import com.cccollector.app.model.User;
import com.cccollector.app.service.CertificateService;
import com.cccollector.app.service.PlatformService;
import com.cccollector.app.service.RootCertificateService;
import com.cccollector.app.service.UserService;

/**
 * 证书Bean类
 *
 * @author 谢朋
 * Copyright © 2015-2018年 北京华星成汇文化发展有限公司. All rights reserved.
 */
@ManagedBean
@ViewScoped
public class CertificateBean {

	/**
	 * 证书服务
	 */
	@ManagedProperty(value = "#{certificateService}")
	private CertificateService certificateService;

	public void setCertificateService(CertificateService _certificateService) {
		certificateService = _certificateService;
	}

	/**
	 * 根证书服务
	 */
	@ManagedProperty(value = "#{rootCertificateService}")
	private RootCertificateService rootCertificateService;

	public void setRootCertificateService(RootCertificateService _rootCertificateService) {
		rootCertificateService = _rootCertificateService;
	}	

	/**
	 * 平台服务
	 */
	@ManagedProperty(value = "#{platformService}")
	private PlatformService platformService;

	public void setPlatformService(PlatformService _platformService) {
		platformService = _platformService;
	}	

	/**
	 * 用户服务
	 */
	@ManagedProperty(value = "#{userService}")
	private UserService userService;

	public void setUserService(UserService _userService) {
		userService = _userService;
	}	
	
	/**
	 * 证书ID
	 */
	private String certificateId;

	public String getCertificateId() {
		return certificateId;
	}

	public void setCertificateId(String _certificateId) {
		certificateId = _certificateId;
		
		// 新建或加载证书
		if (certificate == null) {
			Integer id = 0;
			try {
				id = Integer.valueOf(certificateId);
			} catch (Exception e) {}
			if (id == 0) {
				certificate = new Certificate();
				certificate.setEnabled(false);
				if (rootCertificate == null) {
					rootCertificate = new RootCertificate();
				}
				certificate.setRootCertificate(rootCertificate);
				if (owner != null) {
					certificate.setOwnerType(owner instanceof Platform ? Certificate.OwnerTypeEnum.平台.ordinal() : Certificate.OwnerTypeEnum.用户.ordinal());
					certificate.setOwnerId(owner instanceof Platform ? ((Platform) owner).getPlatformId() : ((User) owner).getUserId());
					certificate.setOwnerName(owner instanceof Platform ? ((Platform) owner).getBundleId() : ((User) owner).getUsername());
				}
			} else {
				certificate = certificateService.loadById(id);
			}
		}
	}

	/**
	 * 证书
	 */
	private Certificate certificate;

	public Certificate getCertificate() {
		return certificate;
	}
	
	/**
	 * 所属根证书ID
	 */
	private String rootCertificateId;

	public String getRootCertificateId() {
		return rootCertificateId;
	}

	public void setRootCertificateId(String _rootCertificateId) {
		rootCertificateId = _rootCertificateId;
		
		// 加载根证书
		Integer id = 0;
		try {
			id = Integer.valueOf(rootCertificateId);
		} catch (Exception e) {}
		if (id != 0) {
			rootCertificate = rootCertificateService.loadById(id);
		}
	}

	/**
	 * 所属根证书
	 */
	private RootCertificate rootCertificate;

	public RootCertificate getRootCertificate() {
		return rootCertificate;
	}

	/**
	 * 所有者类别
	 */
	private String ownerType;

	public String getOwnerType() {
		return ownerType;
	}

	public void setOwnerType(String _ownerType) {
		ownerType = _ownerType;
	}

	/**
	 * 所有者ID
	 */
	private String ownerId;

	public String getOwnerId() {
		return ownerId;
	}

	public void setOwnerId(String _ownerId) {
		ownerId = _ownerId;
		
		// 加载所有者
		if (owner == null) {
			Integer type = -1;
			Integer id = 0;
			try {
				type = Integer.valueOf(ownerType);
				id = Integer.valueOf(ownerId);
			} catch (Exception e) {}
			if (type != -1 && id != 0) {
				owner = type == 0 ? platformService.loadById(id) : userService.loadById(id);
			}
		}
	}

	/**
	 * 选中的所有者类别
	 */
	private String selectedOwnerType;

	public String getSelectedOwnerType() {
		return selectedOwnerType;
	}

	public void setSelectedOwnerType(String _selectedOwnerType) {
		selectedOwnerType = _selectedOwnerType;
	}

	/**
	 * 选中的所有者ID
	 */
	private String selectedOwnerId;

	public String getSelectedOwnerId() {
		return selectedOwnerId;
	}

	public void setSelectedOwnerId(String _selectedOwnerId) {
		selectedOwnerId = _selectedOwnerId;
		
		// 加载所有者
		if (owner == null) {
			Integer type = -1;
			Integer id = 0;
			try {
				type = Integer.valueOf(selectedOwnerType);
				id = Integer.valueOf(selectedOwnerId);
			} catch (Exception e) {}
			if (type != -1 && id != 0) {
				owner = type == 0 ? platformService.loadById(id) : userService.loadById(id);
			}
		}
	}

	/**
	 * 所有者
	 */
	private Object owner;

	public Object getOwner() {
		return owner;
	}	

	/**
	 * 保存
	 */
	public void saveAction() {		
		if (certificate.getCertificateId() == null) {
			// 添加证书
			Integer certificateId = certificateService.saveCertificate(certificate);
			RequestContext.getCurrentInstance().closeDialog(certificateId != null ? Boolean.TRUE : Boolean.FALSE);
		} else {	
			// 编辑证书
			Certificate	certificateUpdated = certificateService.update(certificate);
			RequestContext.getCurrentInstance().closeDialog(certificateUpdated != null ? Boolean.TRUE : Boolean.FALSE);
		}
	}
}
